# Minesweeper environment configuration for HUD VF Gym

# Default settings
defaults:
  max_turns: 30  # Maximum number of turns per game
  max_output_tokens: 512  # Maximum tokens per agent response

system_prompt: |
  You are an AI agent playing the game Minesweeper. 
  Your objective is to uncover all non-mine cells without revealing a mine. 
  If you reveal a mine, the game ends immediately.

  ## Board Representation
  The board is a grid made of cells, with each cell represented by one of the following symbols:
  - 'X': Unrevealed cell
  - 'F': Flagged cell (suspected mine)
  - '*': Mine (only shown if the game is over)
  - '-': Empty cell (no adjacent mines)
  - '1'-'8': A number showing how many mines are in the adjacent cells

  ## Rules of Play
  - You win by revealing all safe cells (all non-mine cells).
  - You lose immediately if you reveal a cell containing a mine.
  - A number (1â€“8) indicates the count of mines in the eight surrounding cells.
  - Use flags ('F') to mark suspected mines to help reasoning, but flagging is optional for winning.
  - If you reveal an empty cell ('-'), the game will automatically reveal all connected empty cells and their bordering numbered cells. This effect may cascade across large areas of the board.
  - If you lose (by revealing a mine), you must immediately call `done()`.

  ## Available Tools
  You may interact with the game only through the following tools:
  - reveal(row, col): Reveal a cell at the given coordinates  
    Usage: `<tool>reveal(2, 3)</tool>`

  - flag(row, col): Flag or unflag a cell as a suspected mine  
    Usage: `<tool>flag(0, 1)</tool>`

  - get_board(): View the current state of the board  
    Usage: `<tool>get_board()</tool>`

  - done(): Signal that you have finished the game, either by winning (all safe cells revealed) or losing (a mine was revealed)  
    Usage: `<tool>done()</tool>`

  ## Critical Constraints
  - You must only call **one tool at a time**.
  - Do not wrap your tool calls in python tags, wrap it in tool tags exactly like this `<tool>tool_name(arguments)</tool>`.
  - After calling a tool, you must wait for the response before making another tool call.
  - If you reveal a mine (`*`), you must immediately call `<tool>done()</tool>` and stop playing.
  - If you have successfully revealed all safe cells, call `<tool>done()</tool>` to signal victory.

  ## Strategy Expectations
  - Always base your decisions on the current visible board state.
  - Use logical reasoning to determine safe moves where possible.
  - If no certain move exists, you may make a guess, but accept the risk of losing.


# Job configuration for tracking
job:
  name: "Minesweeper Training Run"
  metadata:
    environment: "minesweeper"
    experiment: "baseline_grpo"

# Parser configuration
parser:
  use_thinking: true   # Enable thinking tags for reasoning
  xml_weight: 0.6      # Weight for XML format validation
  action_weight: 0.4   # Weight for action syntax validation

# Action mappings from agent tools to MCP tools
action_mappings:
  # reveal(row, col) -> MCP reveal tool
  reveal:
    _parser:
      positional: ["row", "col"]
    _tool: "reveal"
    row:
      from_arg: "row"
    col:
      from_arg: "col"
  
  # flag(row, col) -> MCP flag tool
  flag:
    _parser:
      positional: ["row", "col"]
    _tool: "flag"
    row:
      from_arg: "row"
    col:
      from_arg: "col"
  
  # get_board() -> MCP get_board tool
  get_board:
    _parser:
      positional: []
    _tool: "get_board"
  
  # done() -> Task completion signal
  done:
    _parser:
      positional: []
    _tool: "_done"  # Special internal tool for task completion

# Rubric configuration for reward calculation
rubric:
  weights:
    task_completion: 0.8       # Primary task completion (cells revealed)
    tool_execution: 0.1        # Successful tool execution rate
    format_compliance: 0.1     # XML format and action syntax
